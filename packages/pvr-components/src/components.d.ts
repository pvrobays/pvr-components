/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IconType } from "./components/pvr-icon/icon-type";
import { PvrMultiSelectEntry } from "./components/pvr-multiselect/PvrMultiSelect";
export { IconType } from "./components/pvr-icon/icon-type";
export { PvrMultiSelectEntry } from "./components/pvr-multiselect/PvrMultiSelect";
export namespace Components {
    interface PvrAutocomplete {
        "async": boolean;
        "noResults": string;
        "options": any[];
        "placeholder": string;
        "width": string;
    }
    interface PvrButton {
        "border": boolean;
        "customIcon": string;
        "disabled": boolean;
        "icon": IconType | null;
        "size": "small" | "normal" | "large";
        "type": "primary" | "secondary" | "silent" | "warning" | "red";
    }
    interface PvrComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PvrIcon {
        /**
          * The role of the button
         */
        "type": IconType;
    }
    interface PvrInput {
        "icon"?: IconType;
        "placeholder"?: string;
        "width": string;
    }
    interface PvrMultiselect {
        "options": PvrMultiSelectEntry[];
    }
}
export interface PvrAutocompleteCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPvrAutocompleteElement;
}
export interface PvrInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPvrInputElement;
}
export interface PvrMultiselectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPvrMultiselectElement;
}
declare global {
    interface HTMLPvrAutocompleteElementEventMap {
        "pvrKeyPress": any;
        "pvrSelectItem": any;
    }
    interface HTMLPvrAutocompleteElement extends Components.PvrAutocomplete, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPvrAutocompleteElementEventMap>(type: K, listener: (this: HTMLPvrAutocompleteElement, ev: PvrAutocompleteCustomEvent<HTMLPvrAutocompleteElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPvrAutocompleteElementEventMap>(type: K, listener: (this: HTMLPvrAutocompleteElement, ev: PvrAutocompleteCustomEvent<HTMLPvrAutocompleteElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPvrAutocompleteElement: {
        prototype: HTMLPvrAutocompleteElement;
        new (): HTMLPvrAutocompleteElement;
    };
    interface HTMLPvrButtonElement extends Components.PvrButton, HTMLStencilElement {
    }
    var HTMLPvrButtonElement: {
        prototype: HTMLPvrButtonElement;
        new (): HTMLPvrButtonElement;
    };
    interface HTMLPvrComponentElement extends Components.PvrComponent, HTMLStencilElement {
    }
    var HTMLPvrComponentElement: {
        prototype: HTMLPvrComponentElement;
        new (): HTMLPvrComponentElement;
    };
    interface HTMLPvrIconElement extends Components.PvrIcon, HTMLStencilElement {
    }
    var HTMLPvrIconElement: {
        prototype: HTMLPvrIconElement;
        new (): HTMLPvrIconElement;
    };
    interface HTMLPvrInputElementEventMap {
        "pvrKeyPress": any;
    }
    interface HTMLPvrInputElement extends Components.PvrInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPvrInputElementEventMap>(type: K, listener: (this: HTMLPvrInputElement, ev: PvrInputCustomEvent<HTMLPvrInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPvrInputElementEventMap>(type: K, listener: (this: HTMLPvrInputElement, ev: PvrInputCustomEvent<HTMLPvrInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPvrInputElement: {
        prototype: HTMLPvrInputElement;
        new (): HTMLPvrInputElement;
    };
    interface HTMLPvrMultiselectElementEventMap {
        "optionsChanged": PvrMultiSelectEntry[];
    }
    interface HTMLPvrMultiselectElement extends Components.PvrMultiselect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPvrMultiselectElementEventMap>(type: K, listener: (this: HTMLPvrMultiselectElement, ev: PvrMultiselectCustomEvent<HTMLPvrMultiselectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPvrMultiselectElementEventMap>(type: K, listener: (this: HTMLPvrMultiselectElement, ev: PvrMultiselectCustomEvent<HTMLPvrMultiselectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPvrMultiselectElement: {
        prototype: HTMLPvrMultiselectElement;
        new (): HTMLPvrMultiselectElement;
    };
    interface HTMLElementTagNameMap {
        "pvr-autocomplete": HTMLPvrAutocompleteElement;
        "pvr-button": HTMLPvrButtonElement;
        "pvr-component": HTMLPvrComponentElement;
        "pvr-icon": HTMLPvrIconElement;
        "pvr-input": HTMLPvrInputElement;
        "pvr-multiselect": HTMLPvrMultiselectElement;
    }
}
declare namespace LocalJSX {
    interface PvrAutocomplete {
        "async"?: boolean;
        "noResults"?: string;
        "onPvrKeyPress"?: (event: PvrAutocompleteCustomEvent<any>) => void;
        "onPvrSelectItem"?: (event: PvrAutocompleteCustomEvent<any>) => void;
        "options"?: any[];
        "placeholder"?: string;
        "width"?: string;
    }
    interface PvrButton {
        "border"?: boolean;
        "customIcon"?: string;
        "disabled"?: boolean;
        "icon"?: IconType | null;
        "size"?: "small" | "normal" | "large";
        "type"?: "primary" | "secondary" | "silent" | "warning" | "red";
    }
    interface PvrComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PvrIcon {
        /**
          * The role of the button
         */
        "type"?: IconType;
    }
    interface PvrInput {
        "icon"?: IconType;
        "onPvrKeyPress"?: (event: PvrInputCustomEvent<any>) => void;
        "placeholder"?: string;
        "width"?: string;
    }
    interface PvrMultiselect {
        "onOptionsChanged"?: (event: PvrMultiselectCustomEvent<PvrMultiSelectEntry[]>) => void;
        "options"?: PvrMultiSelectEntry[];
    }
    interface IntrinsicElements {
        "pvr-autocomplete": PvrAutocomplete;
        "pvr-button": PvrButton;
        "pvr-component": PvrComponent;
        "pvr-icon": PvrIcon;
        "pvr-input": PvrInput;
        "pvr-multiselect": PvrMultiselect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "pvr-autocomplete": LocalJSX.PvrAutocomplete & JSXBase.HTMLAttributes<HTMLPvrAutocompleteElement>;
            "pvr-button": LocalJSX.PvrButton & JSXBase.HTMLAttributes<HTMLPvrButtonElement>;
            "pvr-component": LocalJSX.PvrComponent & JSXBase.HTMLAttributes<HTMLPvrComponentElement>;
            "pvr-icon": LocalJSX.PvrIcon & JSXBase.HTMLAttributes<HTMLPvrIconElement>;
            "pvr-input": LocalJSX.PvrInput & JSXBase.HTMLAttributes<HTMLPvrInputElement>;
            "pvr-multiselect": LocalJSX.PvrMultiselect & JSXBase.HTMLAttributes<HTMLPvrMultiselectElement>;
        }
    }
}
